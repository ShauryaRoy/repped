{"ast":null,"code":"var _jsxFileName = \"/home/shaurya/Desktop/Pipi_Linux/Repped/repped-website/repped/src/pages/Swipe.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport Navbar from \"../components/navbar\";\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport \"../styles/pages/Swipe.scss\";\nimport { supabase } from '../createClient';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Swipe = () => {\n  _s();\n  const [characters, setCharacters] = useState([]);\n  const [lastDirection, setLastDirection] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkAuth = async () => {\n      const {\n        data: session,\n        error: sessionError\n      } = await supabase.auth.getSession();\n      if (sessionError) {\n        console.error('Error fetching session:', sessionError.message);\n        navigate('/');\n        return;\n      }\n      if (session && session.session) {\n        var _user$user_metadata;\n        const user = session.session.user;\n        setUserId(user.id);\n\n        // Since there's no 'auth' table, we'll just log the user data\n        console.log('User ID:', user.id);\n        console.log('User Name:', ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.name) || 'No Name');\n      } else {\n        // No session means user is not authenticated\n        navigate('/');\n      }\n    };\n    const fetchData = async () => {\n      const {\n        data,\n        error\n      } = await supabase.from('prodata').select('*');\n      if (error) {\n        console.error('Error fetching data:', error.message);\n      } else {\n        console.log('Fetched data:', data);\n        setCharacters(data);\n      }\n    };\n    checkAuth();\n    fetchData();\n  }, [navigate]);\n  const swiped = async (direction, product) => {\n    console.log('removing:', product.name);\n    setLastDirection(direction);\n    if (direction === 'up' && userId) {\n      console.log('Adding to cart:', product);\n      const {\n        data,\n        error\n      } = await supabase.from('cart').upsert([{\n        user_id: userId,\n        product_id: product.id\n      }], {\n        onConflict: ['user_id', 'product_id']\n      });\n      if (error) {\n        console.error('Error adding to cart:', error.message);\n      } else {\n        console.log('Product added to cart:', data);\n      }\n      dispatch({\n        type: 'ADD_TO_CART',\n        payload: product\n      });\n    }\n  };\n  const outOfFrame = name => {\n    console.log(name + ' left the screen!');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swiper-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-container\",\n          children: [characters.map(character => /*#__PURE__*/_jsxDEV(TinderCard, {\n            className: \"swipe\",\n            onSwipe: dir => swiped(dir, character),\n            onCardLeftScreen: () => outOfFrame(character.name),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                backgroundImage: `url(${character.url})`,\n                backgroundSize: 'cover',\n                backgroundPosition: 'center'\n              },\n              className: \"card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"name\",\n                children: character.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: character.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Price: $\", character.price]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this)\n          }, character.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"swipe-info\",\n            children: lastDirection ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You swiped \", lastDirection]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Swipe, \"e0NqkfZ/swhb4jlDQhgbIsXm6A0=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n_c = Swipe;\nexport default Swipe;\nvar _c;\n$RefreshReg$(_c, \"Swipe\");","map":{"version":3,"names":["React","useState","useEffect","TinderCard","Navbar","useDispatch","useNavigate","supabase","jsxDEV","_jsxDEV","Fragment","_Fragment","Swipe","_s","characters","setCharacters","lastDirection","setLastDirection","userId","setUserId","dispatch","navigate","checkAuth","data","session","error","sessionError","auth","getSession","console","message","_user$user_metadata","user","id","log","user_metadata","name","fetchData","from","select","swiped","direction","product","upsert","user_id","product_id","onConflict","type","payload","outOfFrame","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","character","onSwipe","dir","onCardLeftScreen","style","backgroundImage","url","backgroundSize","backgroundPosition","description","price","_c","$RefreshReg$"],"sources":["/home/shaurya/Desktop/Pipi_Linux/Repped/repped-website/repped/src/pages/Swipe.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport Navbar from \"../components/navbar\";\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport \"../styles/pages/Swipe.scss\";\nimport { supabase } from '../createClient';\n\nconst Swipe = () => {\n    const [characters, setCharacters] = useState([]);\n    const [lastDirection, setLastDirection] = useState(null);\n    const [userId, setUserId] = useState(null);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const checkAuth = async () => {\n            const { data: session, error: sessionError } = await supabase.auth.getSession();\n            if (sessionError) {\n                console.error('Error fetching session:', sessionError.message);\n                navigate('/');\n                return;\n            }\n\n            if (session && session.session) {\n                const user = session.session.user;\n                setUserId(user.id);\n\n                // Since there's no 'auth' table, we'll just log the user data\n                console.log('User ID:', user.id);\n                console.log('User Name:', user.user_metadata?.name || 'No Name');\n            } else {\n                // No session means user is not authenticated\n                navigate('/');\n            }\n        };\n\n        const fetchData = async () => {\n            const { data, error } = await supabase\n                .from('prodata')\n                .select('*');\n\n            if (error) {\n                console.error('Error fetching data:', error.message);\n            } else {\n                console.log('Fetched data:', data);\n                setCharacters(data);\n            }\n        };\n\n        checkAuth();\n        fetchData();\n    }, [navigate]);\n\n    const swiped = async (direction, product) => {\n        console.log('removing:', product.name);\n        setLastDirection(direction);\n        if (direction === 'up' && userId) {\n            console.log('Adding to cart:', product);\n\n            const { data, error } = await supabase\n                .from('cart')\n                .upsert([\n                    { user_id: userId, product_id: product.id }\n                ], { onConflict: ['user_id', 'product_id'] });\n\n            if (error) {\n                console.error('Error adding to cart:', error.message);\n            } else {\n                console.log('Product added to cart:', data);\n            }\n\n            dispatch({ type: 'ADD_TO_CART', payload: product });\n        }\n    };\n\n    const outOfFrame = (name) => {\n        console.log(name + ' left the screen!');\n    };\n\n    return (\n        <>\n            <Navbar />\n            <div className=\"dashboard\">\n                <div className=\"swiper-container\">\n                    <div className=\"card-container\">\n                        {characters.map((character) => (\n                            <TinderCard\n                                className='swipe'\n                                key={character.id}\n                                onSwipe={(dir) => swiped(dir, character)}\n                                onCardLeftScreen={() => outOfFrame(character.name)}\n                            >\n                                <div\n                                    style={{\n                                        backgroundImage: `url(${character.url})`,\n                                        backgroundSize: 'cover',\n                                        backgroundPosition: 'center'\n                                    }}\n                                    className='card'\n                                >\n                                    <h3 className='name'>{character.name}</h3>\n                                    <p>{character.description}</p>\n                                    <p>Price: ${character.price}</p>\n                                </div>\n                            </TinderCard>\n                        ))}\n                        <div className=\"swipe-info\">\n                            {lastDirection ? (\n                                <p>You swiped {lastDirection}</p>\n                            ) : (\n                                <p />\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Swipe;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,mBAAmB;AAC1C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,4BAA4B;AACnC,SAASC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAMmB,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAMgB,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAE9BJ,SAAS,CAAC,MAAM;IACZ,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAM;QAAEC,IAAI,EAAEC,OAAO;QAAEC,KAAK,EAAEC;MAAa,CAAC,GAAG,MAAMnB,QAAQ,CAACoB,IAAI,CAACC,UAAU,CAAC,CAAC;MAC/E,IAAIF,YAAY,EAAE;QACdG,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEC,YAAY,CAACI,OAAO,CAAC;QAC9DT,QAAQ,CAAC,GAAG,CAAC;QACb;MACJ;MAEA,IAAIG,OAAO,IAAIA,OAAO,CAACA,OAAO,EAAE;QAAA,IAAAO,mBAAA;QAC5B,MAAMC,IAAI,GAAGR,OAAO,CAACA,OAAO,CAACQ,IAAI;QACjCb,SAAS,CAACa,IAAI,CAACC,EAAE,CAAC;;QAElB;QACAJ,OAAO,CAACK,GAAG,CAAC,UAAU,EAAEF,IAAI,CAACC,EAAE,CAAC;QAChCJ,OAAO,CAACK,GAAG,CAAC,YAAY,EAAE,EAAAH,mBAAA,GAAAC,IAAI,CAACG,aAAa,cAAAJ,mBAAA,uBAAlBA,mBAAA,CAAoBK,IAAI,KAAI,SAAS,CAAC;MACpE,CAAC,MAAM;QACH;QACAf,QAAQ,CAAC,GAAG,CAAC;MACjB;IACJ,CAAC;IAED,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAM;QAAEd,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAMlB,QAAQ,CACjC+B,IAAI,CAAC,SAAS,CAAC,CACfC,MAAM,CAAC,GAAG,CAAC;MAEhB,IAAId,KAAK,EAAE;QACPI,OAAO,CAACJ,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACK,OAAO,CAAC;MACxD,CAAC,MAAM;QACHD,OAAO,CAACK,GAAG,CAAC,eAAe,EAAEX,IAAI,CAAC;QAClCR,aAAa,CAACQ,IAAI,CAAC;MACvB;IACJ,CAAC;IAEDD,SAAS,CAAC,CAAC;IACXe,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,MAAMmB,MAAM,GAAG,MAAAA,CAAOC,SAAS,EAAEC,OAAO,KAAK;IACzCb,OAAO,CAACK,GAAG,CAAC,WAAW,EAAEQ,OAAO,CAACN,IAAI,CAAC;IACtCnB,gBAAgB,CAACwB,SAAS,CAAC;IAC3B,IAAIA,SAAS,KAAK,IAAI,IAAIvB,MAAM,EAAE;MAC9BW,OAAO,CAACK,GAAG,CAAC,iBAAiB,EAAEQ,OAAO,CAAC;MAEvC,MAAM;QAAEnB,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAMlB,QAAQ,CACjC+B,IAAI,CAAC,MAAM,CAAC,CACZK,MAAM,CAAC,CACJ;QAAEC,OAAO,EAAE1B,MAAM;QAAE2B,UAAU,EAAEH,OAAO,CAACT;MAAG,CAAC,CAC9C,EAAE;QAAEa,UAAU,EAAE,CAAC,SAAS,EAAE,YAAY;MAAE,CAAC,CAAC;MAEjD,IAAIrB,KAAK,EAAE;QACPI,OAAO,CAACJ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACK,OAAO,CAAC;MACzD,CAAC,MAAM;QACHD,OAAO,CAACK,GAAG,CAAC,wBAAwB,EAAEX,IAAI,CAAC;MAC/C;MAEAH,QAAQ,CAAC;QAAE2B,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAEN;MAAQ,CAAC,CAAC;IACvD;EACJ,CAAC;EAED,MAAMO,UAAU,GAAIb,IAAI,IAAK;IACzBP,OAAO,CAACK,GAAG,CAACE,IAAI,GAAG,mBAAmB,CAAC;EAC3C,CAAC;EAED,oBACI3B,OAAA,CAAAE,SAAA;IAAAuC,QAAA,gBACIzC,OAAA,CAACL,MAAM;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV7C,OAAA;MAAK8C,SAAS,EAAC,WAAW;MAAAL,QAAA,eACtBzC,OAAA;QAAK8C,SAAS,EAAC,kBAAkB;QAAAL,QAAA,eAC7BzC,OAAA;UAAK8C,SAAS,EAAC,gBAAgB;UAAAL,QAAA,GAC1BpC,UAAU,CAAC0C,GAAG,CAAEC,SAAS,iBACtBhD,OAAA,CAACN,UAAU;YACPoD,SAAS,EAAC,OAAO;YAEjBG,OAAO,EAAGC,GAAG,IAAKnB,MAAM,CAACmB,GAAG,EAAEF,SAAS,CAAE;YACzCG,gBAAgB,EAAEA,CAAA,KAAMX,UAAU,CAACQ,SAAS,CAACrB,IAAI,CAAE;YAAAc,QAAA,eAEnDzC,OAAA;cACIoD,KAAK,EAAE;gBACHC,eAAe,EAAE,OAAOL,SAAS,CAACM,GAAG,GAAG;gBACxCC,cAAc,EAAE,OAAO;gBACvBC,kBAAkB,EAAE;cACxB,CAAE;cACFV,SAAS,EAAC,MAAM;cAAAL,QAAA,gBAEhBzC,OAAA;gBAAI8C,SAAS,EAAC,MAAM;gBAAAL,QAAA,EAAEO,SAAS,CAACrB;cAAI;gBAAAe,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC1C7C,OAAA;gBAAAyC,QAAA,EAAIO,SAAS,CAACS;cAAW;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC9B7C,OAAA;gBAAAyC,QAAA,GAAG,UAAQ,EAACO,SAAS,CAACU,KAAK;cAAA;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/B;UAAC,GAfDG,SAAS,CAACxB,EAAE;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAgBT,CACf,CAAC,eACF7C,OAAA;YAAK8C,SAAS,EAAC,YAAY;YAAAL,QAAA,EACtBlC,aAAa,gBACVP,OAAA;cAAAyC,QAAA,GAAG,aAAW,EAAClC,aAAa;YAAA;cAAAmC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,gBAEjC7C,OAAA;cAAA0C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UACP;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAACzC,EAAA,CA/GID,KAAK;EAAA,QAIUP,WAAW,EACXC,WAAW;AAAA;AAAA8D,EAAA,GAL1BxD,KAAK;AAiHX,eAAeA,KAAK;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}